import imp
from re import S
import pandas as pd
import streamlit as st
import numpy as np
#import joblib
#from sklearn import preprocessing 
#from sklearn.preprocessing import LabelEncoder
#from sklearn.model_selection import train_test_split

def app():
    st.write("# Naive Bayes Classifier")
    st.write("The Naive Bayes Classifier is a basic and effective classification method that aids in the development of fast machine learning models capable of making quick predictions. The dataset we using it consists of multi-class issues. The reason we choose Naive Bayes is Naive Bayes is a good choice to deal with the multi-class predictions issues. If the premise of feature independence remains true, it can outperform other models while using far less training data. We used Naive Bayes Classifier to predict the Num_of_baskets and Age_Range. The overall preformance of the model are shown as below:")
    
    st.write("## Num_of_baskets")
    
    st.write("The table below is the classification report generated by using Naive Bayes Classifier.")
    df1 = pd.read_csv('BASKETS_NB_Report.csv', index_col=0)
    st.dataframe(df1)
    
    st.write("The Accuracy and Confusion Matrix are shown as below:")
    a_file = open("BASKETS_NB_ACC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("The graph below is the ROC Curve of Naive Bayes Classifier.")
    st.image('BASKETS_NB_ROC.png')
    
    st.write("The AUC for all classes are shown as below:")
    a_file = open("BASKETS_NB_AUC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("## Num_of_baskets with SMOTE")
    
    st.write("The table below is the classification report generated by using Naive Bayes Classifier.")
    df1 = pd.read_csv('SMOTE_BASKETS_NB_Report.csv', index_col=0)
    st.dataframe(df1)
    
    st.write("The Accuracy and Confusion Matrix are shown as below:")
    a_file = open("SMOTE_BASKETS_NB_ACC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("The graph below is the ROC Curve of Naive Bayes Classifier.")
    st.image('SMOTE_BASKETS_NB_ROC.png')
    
    st.write("The AUC for all classes are shown as below:")
    a_file = open("SMOTE_BASKETS_NB_AUC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("## Age_Range")
    
    st.write("The table below is the classification report generated by using Naive Bayes Classifier.")
    df1 = pd.read_csv('AGE_NB_Report.csv', index_col=0)
    st.dataframe(df1)
    
    st.write("The Accuracy and Confusion Matrix are shown as below:")
    a_file = open("AGE_NB_ACC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("The graph below is the ROC Curve of Naive Bayes Classifier.")
    st.image('AGE_NB_ROC.png')
    
    st.write("The AUC for all classes are shown as below:")
    a_file = open("AGE_NB_AUC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write('\n')
    
    st.write("## Age_Range with SMOTE")
    
    st.write("The table below is the classification report generated by using Naive Bayes Classifier.")
    df1 = pd.read_csv('SMOTE_AGE_NB_Report.csv', index_col=0)
    st.dataframe(df1)
    
    st.write("The Accuracy and Confusion Matrix are shown as below:")
    a_file = open("SMOTE_AGE_NB_ACC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    st.write("\n")
    
    st.write("The graph below is the ROC Curve of Naive Bayes Classifier.")
    st.image('SMOTE_AGE_NB_ROC.png')
    
    st.write("The AUC for all classes are shown as below:")
    a_file = open("SMOTE_AGE_NB_AUC.txt")
    lines = a_file.readlines()
    for line in lines:
        st.write(line)
    
    #df = pd.read_csv('cleaned_baskets.csv', index_col=0)
    #df = df.apply(LabelEncoder().fit_transform)
    #y = df.Num_of_Baskets
    #X = df.drop("Num_of_Baskets", 1)
    
    #X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10) 
    
    #loaded_model = joblib.load('Baskets_NB.sav')
    #result = loaded_model.score(X_test, y_test)
    #print(result)